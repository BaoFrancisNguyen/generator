#!/usr/bin/env python3
"""
Script de validation rapide pour tester la distribution des b√¢timents
contre des donn√©es r√©elles approximatives pour la Malaisie.

Usage:
    python quick_validation.py
    
Ce script ne n√©cessite pas d'API keys et utilise des donn√©es de r√©f√©rence
int√©gr√©es bas√©es sur des sources officielles malaisiennes.
"""

import json
import requests
from typing import Dict, List, Tuple
import time
import random

class QuickValidator:
    """Validateur rapide utilisant des donn√©es de r√©f√©rence int√©gr√©es"""
    
    def __init__(self):
        # Donn√©es de r√©f√©rence bas√©es sur sources officielles malaisiennes
        # Sources: DOSM, Ministry of Health, Ministry of Education, Tourism Malaysia
        self.reference_data = {
            'Kuala Lumpur': {
                'population': 1800000,
                'total_buildings_estimate': 280000,
                'hospitals': 28,
                'clinics': 180,
                'schools': 450,
                'hotels': 650,
                'shopping_centers': 85,
                'industrial_buildings': 120,
                'office_buildings': 1200,
                'source': 'DOSM + Ministry data 2023'
            },
            'George Town': {
                'population': 708000,
                'total_buildings_estimate': 95000,
                'hospitals': 8,
                'clinics': 45,
                'schools': 180,
                'hotels': 180,  # Zone UNESCO touristique
                'shopping_centers': 25,
                'industrial_buildings': 35,
                'office_buildings': 280,
                'source': 'Penang State data + Tourism board'
            },
            'Johor Bahru': {
                'population': 497000,
                'total_buildings_estimate': 75000,
                'hospitals': 6,
                'clinics': 35,
                'schools': 150,
                'hotels': 85,
                'shopping_centers': 35,
                'industrial_buildings': 450,  # Hub industriel
                'office_buildings': 380,
                'source': 'Johor State industrial data'
            },
            'Ipoh': {
                'population': 657000,
                'total_buildings_estimate': 88000,
                'hospitals': 7,
                'clinics': 40,
                'schools': 165,
                'hotels': 45,
                'shopping_centers': 18,
                'industrial_buildings': 85,
                'office_buildings': 195,
                'source': 'Perak State data'
            },
            'Langkawi': {
                'population': 65000,
                'total_buildings_estimate': 12000,
                'hospitals': 0,  # Trop petite pour h√¥pital g√©n√©ral
                'clinics': 3,
                'schools': 15,
                'hotels': 95,  # Destination touristique
                'shopping_centers': 5,
                'industrial_buildings': 2,
                'office_buildings': 8,
                'source': 'Kedah Tourism + Census data'
            },
            'Cyberjaya': {
                'population': 65000,
                'total_buildings_estimate': 8500,
                'hospitals': 0,
                'clinics': 2,
                'schools': 12,
                'hotels': 15,
                'shopping_centers': 8,
                'industrial_buildings': 5,
                'office_buildings': 185,  # Ville technologique
                'source': 'MDEC + Selangor planning'
            }
        }
        
        # Ratios de r√©f√©rence bas√©s sur √©tudes urbaines Malaysia
        self.reference_ratios = {
            'buildings_per_1000_pop': {
                'metropolis': 155,
                'major_city': 135,
                'medium_city': 125,
                'small_city': 115,
                'tourist_town': 185
            },
            'hospitals_per_100k': {
                'minimum_pop_for_hospital': 80000,
                'ratio_per_100k': 1.8
            },
            'schools_per_10k': {
                'primary_secondary': 6.5,
                'all_schools': 8.2
            },
            'hotels_per_10k': {
                'tourist_destination': 14.6,
                'business_hub': 4.8,
                'regular_city': 2.1
            }
        }
    
    def validate_city_distribution(self, city_name: str, 
                                 generated_distribution: Dict[str, int]) -> Dict:
        """Valide la distribution g√©n√©r√©e contre les donn√©es de r√©f√©rence"""
        
        if city_name not in self.reference_data:
            return self._validate_with_ratios(city_name, generated_distribution)
        
        ref_data = self.reference_data[city_name]
        validation_result = {
            'city': city_name,
            'population': ref_data['population'],
            'data_source': ref_data['source'],
            'validations': {},
            'overall_score': 0,
            'recommendations': [],
            'status': 'UNKNOWN'
        }
        
        # Mapping entre noms g√©n√©r√©s et donn√©es de r√©f√©rence
        mapping = {
            'Hospital': 'hospitals',
            'Clinic': 'clinics', 
            'School': 'schools',
            'Hotel': 'hotels',
            'Commercial': 'shopping_centers',
            'Industrial': 'industrial_buildings',
            'Factory': 'industrial_buildings',
            'Office': 'office_buildings'
        }
        
        scores = []
        
        for generated_type, ref_key in mapping.items():
            if generated_type in generated_distribution and ref_key in ref_data:
                generated_count = generated_distribution[generated_type]
                reference_count = ref_data[ref_key]
                
                # Calculer la pr√©cision
                if reference_count > 0:
                    accuracy = max(0, 100 - (abs(generated_count - reference_count) / reference_count * 100))
                else:
                    accuracy = 100 if generated_count == 0 else 0
                
                scores.append(accuracy)
                
                validation_result['validations'][generated_type] = {
                    'generated': generated_count,
                    'reference': reference_count,
                    'accuracy': round(accuracy, 1),
                    'status': self._get_accuracy_status(accuracy),
                    'difference': generated_count - reference_count
                }
                
                # Recommandations sp√©cifiques
                if accuracy < 70:
                    if generated_count > reference_count:
                        validation_result['recommendations'].append(
                            f"üîª R√©duire {generated_type}: {generated_count} ‚Üí ~{reference_count}"
                        )
                    else:
                        validation_result['recommendations'].append(
                            f"üî∫ Augmenter {generated_type}: {generated_count} ‚Üí ~{reference_count}"
                        )
        
        # Score global
        if scores:
            validation_result['overall_score'] = round(sum(scores) / len(scores), 1)
            validation_result['status'] = self._get_overall_status(validation_result['overall_score'])
        
        # Validation des ratios g√©n√©raux
        total_generated = sum(generated_distribution.values())
        buildings_per_1000 = (total_generated / ref_data['population']) * 1000
        
        validation_result['ratio_validation'] = {
            'buildings_per_1000_pop': round(buildings_per_1000, 1),
            'expected_range': self._get_expected_ratio_range(city_name, ref_data['population']),
            'total_buildings_generated': total_generated,
            'estimated_total_real': ref_data['total_buildings_estimate']
        }
        
        return validation_result
    
    def _validate_with_ratios(self, city_name: str, generated_distribution: Dict[str, int]) -> Dict:
        """Validation bas√©e sur les ratios de r√©f√©rence pour villes non document√©es"""
        
        # Estimer la population bas√©e sur le nom ou utiliser une valeur par d√©faut
        estimated_pop = self._estimate_population_from_name(city_name)
        
        validation_result = {
            'city': city_name,
            'population': estimated_pop,
            'data_source': 'Ratios de r√©f√©rence Malaysia',
            'validations': {},
            'overall_score': 0,
            'recommendations': [],
            'status': 'ESTIMATED'
        }
        
        # Validation des h√¥pitaux
        hospitals = generated_distribution.get('Hospital', 0)
        min_pop_hospital = self.reference_ratios['hospitals_per_100k']['minimum_pop_for_hospital']
        
        if estimated_pop < min_pop_hospital and hospitals > 0:
            validation_result['recommendations'].append(
                f"‚ùå H√¥pital dans ville <{min_pop_hospital:,} hab. (pop: {estimated_pop:,})"
            )
            validation_result['validations']['Hospital'] = {
                'generated': hospitals,
                'expected': 0,
                'status': 'ERROR',
                'note': f'Population insuffisante (<{min_pop_hospital:,})'
            }
        elif estimated_pop >= min_pop_hospital:
            expected_hospitals = max(1, round((estimated_pop / 100000) * 
                                           self.reference_ratios['hospitals_per_100k']['ratio_per_100k']))
            validation_result['validations']['Hospital'] = {
                'generated': hospitals,
                'expected': expected_hospitals,
                'status': 'OK' if abs(hospitals - expected_hospitals) <= 1 else 'WARNING'
            }
        
        # Validation des √©coles
        schools = generated_distribution.get('School', 0)
        expected_schools = max(1, round((estimated_pop / 10000) * 
                                      self.reference_ratios['schools_per_10k']['all_schools']))
        
        validation_result['validations']['School'] = {
            'generated': schools,
            'expected': expected_schools,
            'status': 'OK' if abs(schools - expected_schools) <= expected_schools * 0.3 else 'WARNING'
        }
        
        return validation_result
    
    def _estimate_population_from_name(self, city_name: str) -> int:
        """Estimation approximative bas√©e sur le nom de la ville"""
        # Liste des grandes villes connues avec estimations
        known_cities = {
            'Shah Alam': 641000, 'Petaling Jaya': 613000, 'Subang Jaya': 469000,
            'Klang': 440000, 'Kota Kinabalu': 452000, 'Malacca City': 455000,
            'Alor Setar': 405000, 'Seremban': 372000, 'Kuantan': 366000,
            'Iskandar Puteri': 360000, 'Tawau': 313000, 'Ampang Jaya': 315000,
            'Miri': 300000, 'Kuching': 325000, 'Sandakan': 279000,
            'Kuala Terengganu': 285000, 'Taiping': 245000, 'Batu Pahat': 239000,
            'Kluang': 233000, 'Muar': 210000, 'Pasir Gudang': 200000,
            'Kota Bharu': 491000, 'Sungai Petani': 228000, 'Sibu': 183000
        }
        
        if city_name in known_cities:
            return known_cities[city_name]
        
        # Estimation par d√©faut bas√©e sur patterns de noms
        if any(keyword in city_name.lower() for keyword in ['kota', 'city']):
            return random.randint(150000, 400000)  # Villes moyennes
        elif any(keyword in city_name.lower() for keyword in ['kuala', 'taman']):
            return random.randint(50000, 200000)   # Petites villes
        else:
            return random.randint(30000, 150000)   # Tr√®s petites villes
    
    def _get_accuracy_status(self, accuracy: float) -> str:
        """Retourne le statut bas√© sur le pourcentage de pr√©cision"""
        if accuracy >= 85:
            return 'EXCELLENT'
        elif accuracy >= 70:
            return 'GOOD'
        elif accuracy >= 50:
            return 'FAIR'
        else:
            return 'POOR'
    
    def _get_overall_status(self, score: float) -> str:
        """Retourne le statut global"""
        if score >= 80:
            return 'VALIDATED ‚úÖ'
        elif score >= 65:
            return 'ACCEPTABLE ‚ö†Ô∏è'
        else:
            return 'NEEDS_ADJUSTMENT ‚ùå'
    
    def _get_expected_ratio_range(self, city_name: str, population: int) -> str:
        """Retourne la plage attendue de b√¢timents par 1000 habitants"""
        if population > 1000000:
            return "150-170"
        elif population > 500000:
            return "130-150" 
        elif population > 200000:
            return "120-140"
        elif city_name in ['Langkawi'] or 'tourist' in city_name.lower():
            return "170-200"  # Zones touristiques
        else:
            return "110-130"
    
    def run_validation_suite(self, cities_data: Dict[str, Dict[str, int]]) -> Dict:
        """Lance une validation compl√®te sur plusieurs villes"""
        
        suite_results = {
            'validation_timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'cities_validated': len(cities_data),
            'overall_performance': {},
            'city_results': {},
            'summary_recommendations': []
        }
        
        all_scores = []
        
        print("üîç VALIDATION SUITE - DISTRIBUTION DES B√ÇTIMENTS")
        print("="*60)
        
        for city_name, distribution in cities_data.items():
            print(f"\nüìç Validation: {city_name}")
            result = self.validate_city_distribution(city_name, distribution)
            suite_results['city_results'][city_name] = result
            
            if result['overall_score'] > 0:
                all_scores.append(result['overall_score'])
            
            # Affichage console
            print(f"   Score: {result['overall_score']}% - {result['status']}")
            
            if result['recommendations']:
                print("   Recommandations:")
                for rec in result['recommendations'][:3]:  # Limite √† 3
                    print(f"     {rec}")
        
        # Performance globale
        if all_scores:
            suite_results['overall_performance'] = {
                'average_score': round(sum(all_scores) / len(all_scores), 1),
                'best_score': max(all_scores),
                'worst_score': min(all_scores),
                'cities_above_80': len([s for s in all_scores if s >= 80]),
                'cities_below_50': len([s for s in all_scores if s < 50])
            }
        
        # Recommandations g√©n√©rales
        avg_score = suite_results['overall_performance'].get('average_score', 0)
        if avg_score < 70:
            suite_results['summary_recommendations'].extend([
                "üîß Ajuster les ratios dans building_distribution.py",
                "üìä Consulter plus de donn√©es officielles Malaysia",
                "üéØ Calibrer sur villes avec donn√©es r√©elles confirm√©es"
            ])
        elif avg_score >= 80:
            suite_results['summary_recommendations'].append(
                "‚úÖ Distribution globalement r√©aliste - Monitoring p√©riodique recommand√©"
            )
        
        return suite_results
    
    def generate_validation_report(self, suite_results: Dict) -> str:
        """G√©n√®re un rapport de validation lisible"""
        
        report = f"""
üá≤üáæ RAPPORT DE VALIDATION - DISTRIBUTION B√ÇTIMENTS MALAISIE
{'='*70}

üìä R√âSUM√â EX√âCUTIF
{'-'*30}
Villes valid√©es: {suite_results['cities_validated']}
Score moyen: {suite_results['overall_performance'].get('average_score', 'N/A')}%
Villes >80%: {suite_results['overall_performance'].get('cities_above_80', 0)}
Villes <50%: {suite_results['overall_performance'].get('cities_below_50', 0)}

üìç D√âTAIL PAR VILLE
{'-'*30}
"""
        
        for city_name, result in suite_results['city_results'].items():
            report += f"\nüèôÔ∏è {city_name.upper()}\n"
            report += f"   Population: {result['population']:,} hab.\n"
            report += f"   Score global: {result['overall_score']}% - {result['status']}\n"
            
            if result['validations']:
                report += "   Validations d√©taill√©es:\n"
                for building_type, validation in result['validations'].items():
                    if isinstance(validation, dict) and 'accuracy' in validation:
                        report += f"     ‚Ä¢ {building_type}: {validation['accuracy']}% ({validation['status']})\n"
            
            if result['recommendations']:
                report += "   Recommandations prioritaires:\n"
                for rec in result['recommendations'][:2]:
                    report += f"     {rec}\n"
        
        report += f"\nüí° RECOMMANDATIONS G√âN√âRALES\n{'-'*30}\n"
        for rec in suite_results['summary_recommendations']:
            report += f"{rec}\n"
        
        report += f"\nüìã PROCHAINES √âTAPES\n{'-'*30}\n"
        report += """1. Ajuster building_distribution.py selon recommandations
2. Valider ajustements sur villes test
3. Int√©grer nouvelles sources de donn√©es officielles
4. Programmer validation automatique mensuelle
5. Documenter changements dans le changelog
"""
        
        return report


# Script d'exemple d'utilisation
def example_validation():
    """Exemple d'utilisation du validateur"""
    
    validator = QuickValidator()
    
    # Exemple de donn√©es g√©n√©r√©es par votre syst√®me
    test_cities = {
        'Kuala Lumpur': {
            'Residential': 180,
            'Commercial': 25,
            'Office': 15,
            'Hospital': 3,
            'Clinic': 12,
            'School': 35,
            'Hotel': 8,
            'Restaurant': 18,
            'Industrial': 6,
            'Warehouse': 4,
            'Factory': 2,
            'Retail': 22,
            'Apartment': 20
        },
        'Langkawi': {
            'Residential': 45,
            'Commercial': 8,
            'Hotel': 12,  # Zone touristique
            'Restaurant': 6,
            'Retail': 8,
            'School': 3,
            'Clinic': 1,
            'Office': 2,
            'Warehouse': 1
        },
        'Cyberjaya': {
            'Residential': 35,
            'Office': 25,  # Ville technologique
            'Commercial': 8,
            'School': 3,
            'Hotel': 2,
            'Restaurant': 4,
            'Retail': 5,
            'Clinic': 1
        }
    }
    
    # Lancer la validation
    results = validator.run_validation_suite(test_cities)
    
    # G√©n√©rer et afficher le rapport
    report = validator.generate_validation_report(results)
    print(report)
    
    # Sauvegarder les r√©sultats
    with open('validation_results.json', 'w') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ R√©sultats sauvegard√©s dans validation_results.json")
    
    return results


if __name__ == "__main__":
    print("üöÄ D√©marrage de la validation rapide...")
    results = example_validation()
    
    print("\n" + "="*60)
    print("‚úÖ Validation termin√©e!")
    print("üìÅ Consultez validation_results.json pour les d√©tails complets")
    print("üîß Utilisez les recommandations pour ajuster building_distribution.py")