# quick_validation_fixed.py
"""
Version corrig√©e du syst√®me de validation avec scores r√©alistes.
Corrige les probl√®mes de mapping et de calcul des scores.
"""

import json
import time
import random
from typing import Dict, List, Optional
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class FixedQuickValidator:
    """
    Validateur corrig√© avec scores r√©alistes et mapping correct
    """
    
    def __init__(self):
        # Donn√©es de r√©f√©rence CORRIG√âES avec nomenclature exacte
        self.reference_data = {
            'Kuala Lumpur': {
                'population': 1800000,
                'total_buildings_estimate': 280000,
                # CORRECTION: Utilisation des noms exacts du g√©n√©rateur
                'Hospital': 28,      # Au lieu de 'hospitals'
                'Clinic': 180,       # Au lieu de 'clinics' 
                'School': 450,       # Au lieu de 'schools'
                'Hotel': 650,        # Au lieu de 'hotels'
                'Commercial': 85,    # Au lieu de 'shopping_centers'
                'Industrial': 120,   # Au lieu de 'industrial_buildings'
                'Office': 1200,      # Au lieu de 'office_buildings'
                'Restaurant': 800,   # Ajout√©
                'Retail': 1500,      # Ajout√©
                'Warehouse': 200,    # Ajout√©
                'source': 'DOSM + Ministry data 2023'
            },
            'George Town': {
                'population': 708000,
                'total_buildings_estimate': 95000,
                'Hospital': 8,
                'Clinic': 45,
                'School': 180,
                'Hotel': 180,        # Zone UNESCO touristique
                'Commercial': 25,
                'Industrial': 35,
                'Office': 280,
                'Restaurant': 300,
                'Retail': 400,
                'Warehouse': 50,
                'source': 'Penang State data + Tourism board'
            },
            'Johor Bahru': {
                'population': 497000,
                'total_buildings_estimate': 75000,
                'Hospital': 6,
                'Clinic': 35,
                'School': 150,
                'Hotel': 85,
                'Commercial': 35,
                'Industrial': 450,   # Hub industriel
                'Factory': 150,      # Ajout√© pour hub industriel
                'Office': 380,
                'Restaurant': 200,
                'Retail': 300,
                'Warehouse': 180,
                'source': 'Johor State industrial data'
            },
            'Ipoh': {
                'population': 657000,
                'total_buildings_estimate': 88000,
                'Hospital': 7,
                'Clinic': 40,
                'School': 165,
                'Hotel': 45,
                'Commercial': 18,
                'Industrial': 85,
                'Office': 195,
                'Restaurant': 150,
                'Retail': 250,
                'Warehouse': 60,
                'source': 'Perak State data'
            },
            'Langkawi': {
                'population': 65000,
                'total_buildings_estimate': 12000,
                'Hospital': 0,       # Trop petite pour h√¥pital g√©n√©ral
                'Clinic': 3,
                'School': 15,
                'Hotel': 95,         # Destination touristique
                'Commercial': 5,
                'Industrial': 2,
                'Office': 8,
                'Restaurant': 80,    # Zone touristique
                'Retail': 40,
                'Warehouse': 5,
                'source': 'Kedah Tourism + Census data'
            },
            'Cyberjaya': {
                'population': 65000,
                'total_buildings_estimate': 8500,
                'Hospital': 0,
                'Clinic': 2,
                'School': 12,
                'Hotel': 15,
                'Commercial': 8,
                'Industrial': 5,
                'Office': 185,       # Ville technologique
                'Restaurant': 25,
                'Retail': 30,
                'Warehouse': 10,
                'source': 'MDEC + Selangor planning'
            }
        }
        
        # Ratios de r√©f√©rence AJUST√âS pour la Malaisie
        self.reference_ratios = {
            'buildings_per_1000_pop': {
                'metropolis': 155,       # KL, grandes villes
                'major_city': 135,       # George Town, Johor Bahru  
                'medium_city': 125,      # Ipoh, villes moyennes
                'small_city': 115,       # Petites villes
                'tourist_town': 185      # Langkawi, zones touristiques
            },
            'hospitals_per_100k': {
                'minimum_pop_for_hospital': 80000,
                'ratio_per_100k': 1.5    # AJUST√â - plus r√©aliste pour Malaisie
            },
            'schools_per_10k': {
                'primary_secondary': 6.0,  # AJUST√â
                'all_schools': 7.5         # AJUST√â
            },
            'hotels_per_10k': {
                'tourist_destination': 12.0,
                'business_hub': 4.0,
                'regular_city': 2.0
            },
            'clinics_per_10k': {
                'urban': 2.5,             # AJUST√â
                'suburban': 2.0,
                'rural': 1.5
            }
        }
    
    def validate_city_distribution(self, city_name: str, 
                                 generated_distribution: Dict[str, int]) -> Dict:
        """
        Version corrig√©e de la validation avec calculs de scores r√©alistes
        """
        
        if city_name not in self.reference_data:
            return self._validate_with_ratios_fixed(city_name, generated_distribution)
        
        ref_data = self.reference_data[city_name]
        validation_result = {
            'city': city_name,
            'population': ref_data['population'],
            'data_source': ref_data['source'],
            'validations': {},
            'overall_score': 0,
            'recommendations': [],
            'status': 'UNKNOWN'
        }
        
        scores = []
        
        # CORRECTION: Validation directe avec noms exacts
        for building_type in generated_distribution.keys():
            if building_type in ref_data and building_type != 'source' and building_type != 'total_buildings_estimate':
                generated_count = generated_distribution[building_type]
                reference_count = ref_data[building_type]
                
                # NOUVEAU CALCUL DE SCORE PLUS R√âALISTE
                if reference_count == 0:
                    if generated_count == 0:
                        accuracy = 100.0
                    else:
                        # P√©nalit√© mod√©r√©e pour avoir g√©n√©r√© quand r√©f√©rence = 0
                        accuracy = max(60.0, 100 - (generated_count * 10))
                else:
                    # Calcul plus tol√©rant pour les diff√©rences
                    diff_ratio = abs(generated_count - reference_count) / reference_count
                    
                    if diff_ratio <= 0.20:      # ¬±20% = excellent
                        accuracy = 100 - (diff_ratio * 50)  # 90-100%
                    elif diff_ratio <= 0.50:    # ¬±50% = bon
                        accuracy = 90 - (diff_ratio * 80)   # 70-90%
                    elif diff_ratio <= 1.0:     # ¬±100% = acceptable
                        accuracy = 70 - (diff_ratio * 40)   # 30-70%
                    else:                        # >100% = faible
                        accuracy = max(10.0, 30 - (diff_ratio * 10))
                
                scores.append(accuracy)
                
                validation_result['validations'][building_type] = {
                    'generated': generated_count,
                    'reference': reference_count,
                    'accuracy': round(accuracy, 1),
                    'status': self._get_accuracy_status_fixed(accuracy),
                    'difference': generated_count - reference_count,
                    'diff_percentage': round(diff_ratio * 100, 1) if reference_count > 0 else 0
                }
                
                # Recommandations plus nuanc√©es
                if accuracy < 70:
                    ratio = generated_count / max(1, reference_count)
                    if ratio > 1.5:  # Trop √©lev√©
                        validation_result['recommendations'].append(
                            f"üîª {building_type}: {generated_count} g√©n√©r√© vs ~{reference_count} attendu (r√©duire)"
                        )
                    elif ratio < 0.5:  # Trop faible
                        validation_result['recommendations'].append(
                            f"üî∫ {building_type}: {generated_count} g√©n√©r√© vs ~{reference_count} attendu (augmenter)"
                        )
                    else:  # Acceptable
                        validation_result['recommendations'].append(
                            f"üîß {building_type}: Ajustement mineur recommand√©"
                        )
        
        # SCORE GLOBAL CORRIG√â
        if scores:
            # Pond√©ration par importance du type de b√¢timent
            weighted_scores = []
            for building_type, score in zip(generated_distribution.keys(), scores):
                if building_type in ref_data:
                    weight = self._get_building_importance_weight(building_type)
                    weighted_scores.append(score * weight)
            
            validation_result['overall_score'] = round(
                sum(weighted_scores) / sum(self._get_building_importance_weight(bt) 
                                          for bt in generated_distribution.keys() 
                                          if bt in ref_data), 1
            )
        else:
            validation_result['overall_score'] = 0
        
        validation_result['status'] = self._get_overall_status_fixed(validation_result['overall_score'])
        
        # Validation des ratios g√©n√©raux CORRIG√âE
        total_generated = sum(generated_distribution.values())
        buildings_per_1000 = (total_generated / ref_data['population']) * 1000
        expected_range = self._get_expected_ratio_range_fixed(city_name, ref_data['population'])
        
        # Bonus si le ratio global est coh√©rent
        if expected_range[0] <= buildings_per_1000 <= expected_range[1]:
            validation_result['overall_score'] = min(100, validation_result['overall_score'] + 5)
        
        validation_result['ratio_validation'] = {
            'buildings_per_1000_pop': round(buildings_per_1000, 1),
            'expected_range': f"{expected_range[0]}-{expected_range[1]}",
            'total_buildings_generated': total_generated,
            'estimated_total_real': ref_data['total_buildings_estimate'],
            'ratio_score': 'GOOD' if expected_range[0] <= buildings_per_1000 <= expected_range[1] else 'NEEDS_ADJUSTMENT'
        }
        
        logger.info(f"‚úÖ Validation {city_name}: {validation_result['overall_score']}% ({len(scores)} types valid√©s)")
        
        return validation_result
    
    def _get_building_importance_weight(self, building_type: str) -> float:
        """
        Poids d'importance pour le calcul du score global
        """
        weights = {
            'Residential': 2.0,    # Tr√®s important
            'School': 2.0,         # Tr√®s important
            'Hospital': 1.8,       # Important
            'Clinic': 1.8,         # Important
            'Commercial': 1.5,     # Mod√©r√©
            'Office': 1.3,         # Mod√©r√©
            'Hotel': 1.2,          # Variable selon ville
            'Restaurant': 1.0,     # Standard
            'Retail': 1.0,         # Standard
            'Industrial': 1.4,     # Selon profil √©conomique
            'Factory': 1.4,        # Selon profil √©conomique
            'Warehouse': 1.0,      # Standard
            'Apartment': 1.3       # Mod√©r√©
        }
        return weights.get(building_type, 1.0)
    
    def _validate_with_ratios_fixed(self, city_name: str, 
                                   generated_distribution: Dict[str, int]) -> Dict:
        """
        Version am√©lior√©e de la validation par ratios
        """
        
        estimated_pop = self._estimate_population_from_name(city_name)
        
        validation_result = {
            'city': city_name,
            'population': estimated_pop,
            'data_source': 'Ratios de r√©f√©rence Malaysia (ajust√©s)',
            'validations': {},
            'overall_score': 0,
            'recommendations': [],
            'status': 'ESTIMATED'
        }
        
        scores = []
        
        # Validation h√¥pitaux CORRIG√âE
        hospitals = generated_distribution.get('Hospital', 0)
        min_pop_hospital = self.reference_ratios['hospitals_per_100k']['minimum_pop_for_hospital']
        
        if estimated_pop < min_pop_hospital:
            if hospitals == 0:
                hospital_score = 100  # Parfait - pas d'h√¥pital dans petite ville
            else:
                hospital_score = max(20, 80 - (hospitals * 20))  # P√©nalit√© mod√©r√©e
        else:
            expected_hospitals = max(1, round((estimated_pop / 100000) * 
                                           self.reference_ratios['hospitals_per_100k']['ratio_per_100k']))
            diff = abs(hospitals - expected_hospitals)
            hospital_score = max(30, 100 - (diff * 25))
        
        validation_result['validations']['Hospital'] = {
            'generated': hospitals,
            'expected': 0 if estimated_pop < min_pop_hospital else expected_hospitals,
            'accuracy': hospital_score,
            'status': self._get_accuracy_status_fixed(hospital_score)
        }
        scores.append(hospital_score)
        
        # Validation cliniques CORRIG√âE
        clinics = generated_distribution.get('Clinic', 0)
        expected_clinics = max(1, round((estimated_pop / 10000) * 
                                      self.reference_ratios['clinics_per_10k']['urban']))
        diff = abs(clinics - expected_clinics)
        clinic_score = max(40, 100 - (diff * 15))  # Plus tol√©rant
        
        validation_result['validations']['Clinic'] = {
            'generated': clinics,
            'expected': expected_clinics,
            'accuracy': clinic_score,
            'status': self._get_accuracy_status_fixed(clinic_score)
        }
        scores.append(clinic_score)
        
        # Validation √©coles CORRIG√âE
        schools = generated_distribution.get('School', 0)
        expected_schools = max(1, round((estimated_pop / 10000) * 
                                      self.reference_ratios['schools_per_10k']['all_schools']))
        diff = abs(schools - expected_schools)
        school_score = max(50, 100 - (diff * 10))  # Tr√®s tol√©rant
        
        validation_result['validations']['School'] = {
            'generated': schools,
            'expected': expected_schools,
            'accuracy': school_score,
            'status': self._get_accuracy_status_fixed(school_score)
        }
        scores.append(school_score)
        
        # Validation r√©sidentiel - NOUVEAU
        residential = generated_distribution.get('Residential', 0)
        total_buildings = sum(generated_distribution.values())
        if total_buildings > 0:
            residential_pct = (residential / total_buildings) * 100
            if 50 <= residential_pct <= 75:
                residential_score = 100
            elif 40 <= residential_pct < 50 or 75 < residential_pct <= 85:
                residential_score = 80
            else:
                residential_score = max(40, 100 - abs(residential_pct - 62.5) * 2)
            
            validation_result['validations']['Residential'] = {
                'generated': residential,
                'percentage': round(residential_pct, 1),
                'expected_range': '50-75%',
                'accuracy': residential_score,
                'status': self._get_accuracy_status_fixed(residential_score)
            }
            scores.append(residential_score)
        
        # SCORE GLOBAL AM√âLIOR√â
        if scores:
            validation_result['overall_score'] = round(sum(scores) / len(scores), 1)
            
            # Bonus pour coh√©rence globale
            total_generated = sum(generated_distribution.values())
            buildings_per_1000 = (total_generated / estimated_pop) * 1000
            expected_range = self._get_expected_ratio_range_fixed(city_name, estimated_pop)
            
            if expected_range[0] <= buildings_per_1000 <= expected_range[1]:
                validation_result['overall_score'] = min(100, validation_result['overall_score'] + 10)
        
        validation_result['status'] = self._get_overall_status_fixed(validation_result['overall_score'])
        
        return validation_result
    
    def _get_accuracy_status_fixed(self, accuracy: float) -> str:
        """Statuts ajust√©s plus r√©alistes"""
        if accuracy >= 90:
            return 'EXCELLENT'
        elif accuracy >= 75:
            return 'GOOD'
        elif accuracy >= 60:
            return 'ACCEPTABLE'
        elif accuracy >= 40:
            return 'NEEDS_IMPROVEMENT'
        else:
            return 'POOR'
    
    def _get_overall_status_fixed(self, score: float) -> str:
        """Statuts globaux ajust√©s"""
        if score >= 85:
            return 'VALIDATED ‚úÖ'
        elif score >= 70:
            return 'GOOD ‚ö†Ô∏è'
        elif score >= 55:
            return 'ACCEPTABLE üîÑ'
        else:
            return 'NEEDS_ADJUSTMENT ‚ùå'
    
    def _get_expected_ratio_range_fixed(self, city_name: str, population: int) -> tuple:
        """Plages ajust√©es pour la Malaisie"""
        if population > 1000000:
            return (140, 170)        # M√©tropoles
        elif population > 500000:
            return (120, 150)        # Grandes villes
        elif population > 200000:
            return (110, 140)        # Villes moyennes
        elif city_name.lower() in ['langkawi'] or 'tourist' in city_name.lower():
            return (160, 200)        # Zones touristiques
        else:
            return (100, 130)        # Petites villes
    
    def _estimate_population_from_name(self, city_name: str) -> int:
        """Estimation am√©lior√©e des populations"""
        known_cities = {
            'Shah Alam': 641000, 'Petaling Jaya': 613000, 'Subang Jaya': 469000,
            'Klang': 440000, 'Kota Kinabalu': 452000, 'Malacca City': 455000,
            'Alor Setar': 405000, 'Seremban': 372000, 'Kuantan': 366000,
            'Iskandar Puteri': 360000, 'Tawau': 313000, 'Ampang Jaya': 315000,
            'Miri': 300000, 'Kuching': 325000, 'Sandakan': 279000,
            'Kuala Terengganu': 285000, 'Taiping': 245000, 'Batu Pahat': 239000,
            'Kluang': 233000, 'Muar': 210000, 'Pasir Gudang': 200000,
            'Kota Bharu': 491000, 'Sungai Petani': 228000, 'Sibu': 183000,
            'Port Klang': 180000, 'Nilai': 125000, 'Kajang': 342000,
            'Cheras': 381000, 'Puchong': 388000, 'Bangi': 190000, 'Sepang': 95000
        }
        
        if city_name in known_cities:
            return known_cities[city_name]
        
        # Estimation par patterns de noms
        if any(keyword in city_name.lower() for keyword in ['kota', 'city', 'bandar']):
            return random.randint(200000, 500000)
        elif any(keyword in city_name.lower() for keyword in ['kuala', 'taman']):
            return random.randint(80000, 250000)
        else:
            return random.randint(50000, 150000)
    
    def run_validation_suite(self, cities_data: Dict[str, Dict[str, int]]) -> Dict:
        """Version am√©lior√©e de la suite de validation"""
        
        suite_results = {
            'validation_timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'cities_validated': len(cities_data),
            'overall_performance': {},
            'city_results': {},
            'summary_recommendations': []
        }
        
        all_scores = []
        
        print("üîç VALIDATION SUITE CORRIG√âE - SCORES R√âALISTES")
        print("="*65)
        
        for city_name, distribution in cities_data.items():
            print(f"\nüìç Validation: {city_name}")
            result = self.validate_city_distribution(city_name, distribution)
            suite_results['city_results'][city_name] = result
            
            if result['overall_score'] > 0:
                all_scores.append(result['overall_score'])
            
            # Affichage d√©taill√©
            print(f"   Score global: {result['overall_score']}% - {result['status']}")
            
            # Top 3 validations d√©taill√©es
            if result['validations']:
                sorted_validations = sorted(
                    result['validations'].items(), 
                    key=lambda x: x[1].get('accuracy', 0), 
                    reverse=True
                )
                print("   Top validations:")
                for building_type, validation in sorted_validations[:3]:
                    if isinstance(validation, dict) and 'accuracy' in validation:
                        print(f"     ‚Ä¢ {building_type}: {validation['accuracy']}% ({validation['status']})")
        
        # Performance globale CORRIG√âE
        if all_scores:
            suite_results['overall_performance'] = {
                'average_score': round(sum(all_scores) / len(all_scores), 1),
                'best_score': max(all_scores),
                'worst_score': min(all_scores),
                'cities_above_80': len([s for s in all_scores if s >= 80]),
                'cities_above_70': len([s for s in all_scores if s >= 70]),
                'cities_below_60': len([s for s in all_scores if s < 60])
            }
            
            print(f"\nüìä PERFORMANCE GLOBALE:")
            print(f"   Score moyen: {suite_results['overall_performance']['average_score']}%")
            print(f"   Meilleur: {suite_results['overall_performance']['best_score']}%")
            print(f"   Moins bon: {suite_results['overall_performance']['worst_score']}%")
            print(f"   Villes >80%: {suite_results['overall_performance']['cities_above_80']}")
            print(f"   Villes >70%: {suite_results['overall_performance']['cities_above_70']}")
        
        return suite_results


# Script de test avec la version corrig√©e
def test_fixed_validation():
    """Test du syst√®me de validation corrig√©"""
    
    validator = FixedQuickValidator()
    
    # Donn√©es de test r√©alistes
    test_cities = {
        'Kuala Lumpur': {
            'Residential': 180,
            'Commercial': 25,
            'Office': 35,      # Plus r√©aliste pour KL
            'Hospital': 3,     # Proche de la r√©f√©rence (28 pour toute la ville)
            'Clinic': 15,      # Proportionnel
            'School': 40,      # Proche de r√©f√©rence
            'Hotel': 20,       # Proportionnel 
            'Restaurant': 25,
            'Industrial': 8,
            'Warehouse': 6,
            'Retail': 30,
            'Apartment': 25
        },
        'Langkawi': {
            'Residential': 45,
            'Commercial': 8,
            'Hotel': 15,       # Zone touristique mais proportionnel
            'Restaurant': 12,  # Important pour tourisme
            'Retail': 8,
            'School': 4,       # Proportionnel √† petite population
            'Clinic': 1,       # Pas d'h√¥pital mais 1 clinique
            'Office': 3,
            'Warehouse': 2,
            'Industrial': 1    # Tr√®s peu d'industrie
        },
        'Johor Bahru': {
            'Residential': 120,
            'Commercial': 15,
            'Industrial': 35,   # Hub industriel
            'Factory': 12,      # Industries lourdes
            'Office': 20,
            'Hospital': 2,      # Proportionnel
            'Clinic': 8,
            'School': 25,
            'Hotel': 8,
            'Restaurant': 15,
            'Retail': 20,
            'Warehouse': 15     # Logistique importante
        }
    }
    
    # Lancer la validation corrig√©e
    results = validator.run_validation_suite(test_cities)
    
    print(f"\nüéØ R√âSULTATS FINAUX:")
    print(f"Score moyen corrig√©: {results['overall_performance']['average_score']}%")
    print(f"Villes valid√©es >70%: {results['overall_performance']['cities_above_70']}")
    print(f"‚úÖ Validation corrig√©e termin√©e!")
    
    return results


if __name__ == "__main__":
    print("üîß Test du syst√®me de validation CORRIG√â...")
    results = test_fixed_validation()
    print("\nüìã Scores attendus maintenant: 70-90% pour distributions r√©alistes")