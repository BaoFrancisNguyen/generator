# app.py - Application Flask pour G√©n√©ration de Donn√©es √âlectriques Malaysia
"""
Syst√®me de g√©n√©ration de donn√©es √©lectriques r√©alistes pour la Malaisie
Version corrig√©e avec toutes les routes n√©cessaires
Int√®gre le syst√®me OSM et les pr√©dicteurs de b√¢timents
"""

from flask import Flask, render_template, jsonify, request, send_file
import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
import uuid
import os
import json
import logging
from typing import Dict, List, Optional

# Configuration du logging pour tracer les op√©rations
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Import des modules avec gestion d'erreur
try:
    from building_distribution import BuildingDistributor
    BUILDING_DISTRIBUTOR_AVAILABLE = True
    logger.info("‚úÖ BuildingDistributor import√© avec succ√®s")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è BuildingDistributor non disponible: {e}")
    BUILDING_DISTRIBUTOR_AVAILABLE = False

try:
    from automated_districts import EnhancedCoordinatesGenerator
    ENHANCED_COORDINATES_AVAILABLE = True
    logger.info("‚úÖ Syst√®me de coordonn√©es am√©lior√© disponible")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Syst√®me de coordonn√©es am√©lior√© non disponible: {e}")
    ENHANCED_COORDINATES_AVAILABLE = False

try:
    from complete_integration import create_complete_integration
    COMPLETE_INTEGRATION_AVAILABLE = True
    logger.info("‚úÖ Int√©gration compl√®te disponible")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Int√©gration compl√®te non disponible: {e}")
    COMPLETE_INTEGRATION_AVAILABLE = False

# Initialisation de l'application Flask
app = Flask(__name__)
app.config['SECRET_KEY'] = 'malaysia-electricity-generator-2025'


class SimpleDistributor:
    """
    Distributeur simple bas√© uniquement sur la population de la ville
    Solution de secours si BuildingDistributor n'est pas disponible
    """
    
    def __init__(self):
        logger.info("‚úÖ SimpleDistributor initialis√© en mode distribution basique")
    
    def calculate_building_distribution(self, city_name, population, region, total_buildings):
        """
        Calcule la distribution des types de b√¢timents selon la population
        
        Args:
            city_name (str): Nom de la ville
            population (int): Nombre d'habitants
            region (str): R√©gion g√©ographique
            total_buildings (int): Nombre total de b√¢timents √† distribuer
            
        Returns:
            dict: Dictionnaire avec le nombre de b√¢timents par type
        """
        # Distribution basique selon la taille de la ville
        if population > 1000000:  # M√©tropole
            ratios = {
                'Residential': 0.60, 'Commercial': 0.15, 'Office': 0.10,
                'Industrial': 0.05, 'Hospital': 0.002, 'Clinic': 0.008,
                'School': 0.03, 'Hotel': 0.02, 'Restaurant': 0.05,
                'Retail': 0.08, 'Warehouse': 0.015, 'Apartment': 0.012
            }
        elif population > 500000:  # Grande ville
            ratios = {
                'Residential': 0.70, 'Commercial': 0.12, 'Office': 0.06,
                'Industrial': 0.04, 'Hospital': 0.001, 'Clinic': 0.006,
                'School': 0.025, 'Hotel': 0.015, 'Restaurant': 0.04,
                'Retail': 0.06, 'Warehouse': 0.01, 'Apartment': 0.008
            }
        else:  # Ville moyenne/petite
            ratios = {
                'Residential': 0.80, 'Commercial': 0.08, 'Office': 0.03,
                'Industrial': 0.03, 'Hospital': 0.0005, 'Clinic': 0.004,
                'School': 0.02, 'Hotel': 0.01, 'Restaurant': 0.025,
                'Retail': 0.04, 'Warehouse': 0.005, 'Apartment': 0.003
            }
        
        # Calcul des b√¢timents par type
        distribution = {}
        remaining = total_buildings
        
        for building_type, ratio in ratios.items():
            if building_type == list(ratios.keys())[-1]:  # Dernier type
                distribution[building_type] = remaining
            else:
                count = max(1, int(total_buildings * ratio))
                distribution[building_type] = count
                remaining -= count
        
        logger.info(f"Distribution calcul√©e pour {city_name}: {sum(distribution.values())} b√¢timents")
        return distribution


class ElectricityDataGenerator:
    """
    G√©n√©rateur principal de donn√©es √©lectriques pour la Malaisie
    """
    
    def __init__(self):
        """Initialise le g√©n√©rateur avec toutes les donn√©es de base"""
        logger.info("üîß Initialisation du g√©n√©rateur de donn√©es √©lectriques...")
        
        # Initialisation du distributeur de b√¢timents
        if BUILDING_DISTRIBUTOR_AVAILABLE:
            try:
                self.distributor = BuildingDistributor()
                logger.info("‚úÖ BuildingDistributor activ√©")
            except Exception as e:
                logger.error(f"Erreur BuildingDistributor: {e}, utilisation du mode simple")
                self.distributor = SimpleDistributor()
        else:
            self.distributor = SimpleDistributor()
        
        # Initialisation du syst√®me de coordonn√©es
        if ENHANCED_COORDINATES_AVAILABLE:
            try:
                self.coordinates_generator = EnhancedCoordinatesGenerator()
                logger.info("‚úÖ Syst√®me de coordonn√©es am√©lior√© activ√©")
            except Exception as e:
                logger.error(f"Erreur coordonn√©es am√©lior√©es: {e}")
                self.coordinates_generator = None
        else:
            self.coordinates_generator = None
        
        # Donn√©es g√©ographiques de la Malaisie
        self.malaysia_locations = self._init_malaysia_locations()
        
        # Types et classes de b√¢timents
        self.building_classes = self._init_building_classes()
        
        # Patterns de consommation
        self.consumption_patterns = self._init_consumption_patterns()
        
        logger.info(f"‚úÖ G√©n√©rateur initialis√©: {len(self.malaysia_locations)} villes, {len(self.building_classes)} types de b√¢timents")
    
    def _init_malaysia_locations(self):
        """Initialise les donn√©es des villes malaisiennes"""
        return {
            'Kuala Lumpur': {
                'coordinates': [3.139, 101.6869],
                'population': 1800000,
                'region': 'Central',
                'state': 'Federal Territory'
            },
            'George Town': {
                'coordinates': [5.4164, 100.3327],
                'population': 708000,
                'region': 'Northern',
                'state': 'Penang'
            },
            'Ipoh': {
                'coordinates': [4.5975, 101.0901],
                'population': 657000,
                'region': 'Northern',
                'state': 'Perak'
            },
            'Shah Alam': {
                'coordinates': [3.0733, 101.5185],
                'population': 617000,
                'region': 'Central',
                'state': 'Selangor'
            },
            'Petaling Jaya': {
                'coordinates': [3.1073, 101.6067],
                'population': 613977,
                'region': 'Central',
                'state': 'Selangor'
            },
            'Johor Bahru': {
                'coordinates': [1.4927, 103.7414],
                'population': 497067,
                'region': 'Southern',
                'state': 'Johor'
            },
            'Subang Jaya': {
                'coordinates': [3.0436, 101.5817],
                'population': 472930,
                'region': 'Central',
                'state': 'Selangor'
            },
            'Kota Kinabalu': {
                'coordinates': [5.9749, 116.0724],
                'population': 452058,
                'region': 'Eastern',
                'state': 'Sabah'
            },
            'Klang': {
                'coordinates': [3.0449, 101.4446],
                'population': 240016,
                'region': 'Central',
                'state': 'Selangor'
            },
            'Malacca City': {
                'coordinates': [2.2055, 102.2502],
                'population': 484885,
                'region': 'Southern',
                'state': 'Melaka'
            },
            'Alor Setar': {
                'coordinates': [6.1248, 100.3678],
                'population': 405523,
                'region': 'Northern',
                'state': 'Kedah'
            },
            'Kuching': {
                'coordinates': [1.5533, 110.3592],
                'population': 325132,
                'region': 'Eastern',
                'state': 'Sarawak'
            },
            'Tawau': {
                'coordinates': [4.2515, 117.8872],
                'population': 113809,
                'region': 'Eastern',
                'state': 'Sabah'
            },
            'Kuantan': {
                'coordinates': [3.8077, 103.3260],
                'population': 366229,
                'region': 'Eastern',
                'state': 'Pahang'
            }
        }
    
    def _init_building_classes(self):
        """Initialise les types de b√¢timents avec leurs caract√©ristiques"""
        return {
            'Residential': {
                'base_consumption': 15.0,
                'variation': 0.4,
                'peak_hours': [19, 20, 21],
                'low_hours': [3, 4, 5],
                'seasonal_factor': 1.2,
                'description': 'Maisons et r√©sidences individuelles'
            },
            'Apartment': {
                'base_consumption': 8.5,
                'variation': 0.3,
                'peak_hours': [20, 21, 22],
                'low_hours': [3, 4, 5],
                'seasonal_factor': 1.15,
                'description': 'Appartements et condominiums'
            },
            'Commercial': {
                'base_consumption': 45.0,
                'variation': 0.6,
                'peak_hours': [10, 11, 14, 15],
                'low_hours': [1, 2, 3, 4, 5, 6],
                'seasonal_factor': 1.3,
                'description': 'Centres commerciaux et magasins'
            },
            'Office': {
                'base_consumption': 35.0,
                'variation': 0.5,
                'peak_hours': [9, 10, 11, 14, 15, 16],
                'low_hours': [22, 23, 0, 1, 2, 3, 4, 5, 6, 7],
                'seasonal_factor': 1.4,
                'description': 'Bureaux et espaces de travail'
            },
            'Industrial': {
                'base_consumption': 120.0,
                'variation': 0.3,
                'peak_hours': [8, 9, 10, 13, 14, 15],
                'low_hours': [22, 23, 0, 1, 2, 3, 4, 5],
                'seasonal_factor': 1.1,
                'description': 'Usines et installations industrielles'
            },
            'Hospital': {
                'base_consumption': 200.0,
                'variation': 0.2,
                'peak_hours': list(range(24)),  # 24h/24
                'low_hours': [],
                'seasonal_factor': 1.05,
                'description': 'H√¥pitaux et centres m√©dicaux'
            },
            'Clinic': {
                'base_consumption': 25.0,
                'variation': 0.4,
                'peak_hours': [9, 10, 11, 14, 15, 16],
                'low_hours': [22, 23, 0, 1, 2, 3, 4, 5, 6, 7],
                'seasonal_factor': 1.1,
                'description': 'Cliniques et cabinets m√©dicaux'
            },
            'School': {
                'base_consumption': 40.0,
                'variation': 0.8,
                'peak_hours': [8, 9, 10, 11, 13, 14, 15],
                'low_hours': [17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6],
                'seasonal_factor': 1.6,
                'description': '√âcoles et universit√©s'
            },
            'Hotel': {
                'base_consumption': 60.0,
                'variation': 0.4,
                'peak_hours': [19, 20, 21, 22, 7, 8],
                'low_hours': [2, 3, 4, 5],
                'seasonal_factor': 1.3,
                'description': 'H√¥tels et h√©bergements'
            },
            'Restaurant': {
                'base_consumption': 35.0,
                'variation': 0.7,
                'peak_hours': [12, 13, 19, 20, 21],
                'low_hours': [2, 3, 4, 5, 6, 7, 8, 9],
                'seasonal_factor': 1.2,
                'description': 'Restaurants et caf√©s'
            },
            'Retail': {
                'base_consumption': 30.0,
                'variation': 0.5,
                'peak_hours': [11, 12, 15, 16, 17, 20, 21],
                'low_hours': [1, 2, 3, 4, 5, 6, 7, 8],
                'seasonal_factor': 1.25,
                'description': 'Commerces de d√©tail'
            },
            'Warehouse': {
                'base_consumption': 15.0,
                'variation': 0.3,
                'peak_hours': [8, 9, 10, 13, 14, 15, 16],
                'low_hours': [20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7],
                'seasonal_factor': 1.05,
                'description': 'Entrep√¥ts et stockage'
            }
        }
    
    def _init_consumption_patterns(self):
        """Initialise les patterns de consommation selon les r√©gions"""
        return {
            'Central': {'multiplier': 1.2, 'peak_shift': 0, 'climate_factor': 1.3},
            'Northern': {'multiplier': 1.0, 'peak_shift': 0, 'climate_factor': 1.2},
            'Southern': {'multiplier': 1.1, 'peak_shift': 0, 'climate_factor': 1.25},
            'Eastern': {'multiplier': 0.9, 'peak_shift': 1, 'climate_factor': 1.35}
        }
    
    def generate_buildings_dataframe(self, city_name: str, num_buildings: int) -> pd.DataFrame:
        """
        G√©n√®re un DataFrame des b√¢timents pour une ville donn√©e
        
        Args:
            city_name (str): Nom de la ville
            num_buildings (int): Nombre total de b√¢timents √† g√©n√©rer
            
        Returns:
            pd.DataFrame: DataFrame avec tous les b√¢timents g√©n√©r√©s
        """
        logger.info(f"üè¢ G√©n√©ration de {num_buildings} b√¢timents pour {city_name}")
        
        # R√©cup√©ration des informations de la ville
        city_info = self.malaysia_locations.get(city_name)
        if not city_info:
            logger.error(f"‚ùå Ville inconnue: {city_name}")
            raise ValueError(f"Ville non trouv√©e: {city_name}")
        
        # Calcul de la distribution des types de b√¢timents
        try:
            distribution = self.distributor.calculate_building_distribution(
                city_name, 
                city_info['population'], 
                city_info['region'], 
                num_buildings
            )
        except Exception as e:
            logger.error(f"Erreur distribution: {e}")
            # Distribution de secours
            distribution = {'Residential': num_buildings}
        
        # G√©n√©ration des b√¢timents
        buildings_data = []
        building_counter = 1
        
        for building_type, count in distribution.items():
            if count > 0:
                for i in range(count):
                    # G√©n√©ration des coordonn√©es
                    if self.coordinates_generator:
                        try:
                            coords = self.coordinates_generator.generate_building_coordinates(
                                city_name, building_type
                            )
                        except Exception as e:
                            logger.warning(f"Erreur coordonn√©es am√©lior√©es: {e}")
                            coords = self._generate_basic_coordinates(city_info['coordinates'])
                    else:
                        coords = self._generate_basic_coordinates(city_info['coordinates'])
                    
                    # Cr√©ation du b√¢timent
                    building = {
                        'building_id': f"{city_name}_{building_type}_{building_counter:04d}",
                        'city': city_name,
                        'building_type': building_type,
                        'latitude': coords[0],
                        'longitude': coords[1],
                        'region': city_info['region'],
                        'state': city_info['state'],
                        'base_consumption': self.building_classes[building_type]['base_consumption'],
                        'variation': self.building_classes[building_type]['variation']
                    }
                    buildings_data.append(building)
                    building_counter += 1
        
        buildings_df = pd.DataFrame(buildings_data)
        logger.info(f"‚úÖ {len(buildings_df)} b√¢timents g√©n√©r√©s avec succ√®s")
        return buildings_df
    
    def _generate_basic_coordinates(self, city_coords: List[float]) -> List[float]:
        """
        G√©n√®re des coordonn√©es de base autour du centre ville
        
        Args:
            city_coords (List[float]): Coordonn√©es [lat, lng] du centre ville
            
        Returns:
            List[float]: Nouvelles coordonn√©es [lat, lng]
        """
        # Variation al√©atoire autour du centre (rayon ~10km)
        lat_offset = random.uniform(-0.09, 0.09)  # ~10km en latitude
        lng_offset = random.uniform(-0.09, 0.09)  # ~10km en longitude
        
        return [
            city_coords[0] + lat_offset,
            city_coords[1] + lng_offset
        ]
    
    def generate_timeseries_data(self, buildings_df: pd.DataFrame, start_date: str, 
                                end_date: str, freq: str = '30T') -> pd.DataFrame:
        """
        G√©n√®re les donn√©es de s√©ries temporelles de consommation √©lectrique
        
        Args:
            buildings_df (pd.DataFrame): DataFrame des b√¢timents
            start_date (str): Date de d√©but (YYYY-MM-DD)
            end_date (str): Date de fin (YYYY-MM-DD)
            freq (str): Fr√©quence des mesures (30T = 30 minutes)
            
        Returns:
            pd.DataFrame: DataFrame avec les donn√©es de consommation
        """
        logger.info(f"üìä G√©n√©ration des s√©ries temporelles du {start_date} au {end_date} (freq: {freq})")
        
        # G√©n√©ration de l'index temporel
        date_range = pd.date_range(start=start_date, end=end_date, freq=freq)
        logger.info(f"üìà {len(date_range)} points temporels √† g√©n√©rer")
        
        # Stockage des donn√©es
        consumption_data = []
        
        for _, building in buildings_df.iterrows():
            building_type = building['building_type']
            region = building['region']
            
            # R√©cup√©ration des patterns de consommation
            building_class = self.building_classes[building_type]
            region_pattern = self.consumption_patterns.get(region, self.consumption_patterns['Central'])
            
            for timestamp in date_range:
                # Calcul de la consommation pour ce timestamp
                consumption = self._calculate_consumption(
                    building_class, region_pattern, timestamp
                )
                
                # Ajout des donn√©es
                consumption_data.append({
                    'timestamp': timestamp,
                    'building_id': building['building_id'],
                    'consumption_kwh': round(consumption, 2),
                    'city': building['city'],
                    'building_type': building_type,
                    'region': region
                })
        
        consumption_df = pd.DataFrame(consumption_data)
        logger.info(f"‚úÖ {len(consumption_df)} enregistrements de consommation g√©n√©r√©s")
        return consumption_df
    
    def _calculate_consumption(self, building_class: dict, region_pattern: dict, 
                             timestamp: datetime) -> float:
        """
        Calcule la consommation √©lectrique pour un b√¢timent √† un moment donn√©
        
        Args:
            building_class (dict): Classe du b√¢timent avec ses caract√©ristiques
            region_pattern (dict): Pattern r√©gional de consommation
            timestamp (datetime): Moment de la mesure
            
        Returns:
            float: Consommation en kWh
        """
        # Consommation de base
        base = building_class['base_consumption']
        
        # Facteur temporel (heure de la journ√©e)
        hour = timestamp.hour
        time_factor = 1.0
        
        if hour in building_class['peak_hours']:
            time_factor = 1.4  # Pic de consommation
        elif hour in building_class['low_hours']:
            time_factor = 0.6  # Consommation faible
        else:
            time_factor = 1.0  # Consommation normale
        
        # Facteur saisonnier (chaleur en Malaisie)
        seasonal_factor = building_class['seasonal_factor']
        if timestamp.month in [6, 7, 8]:  # Saison s√®che (plus chaud)
            seasonal_factor *= 1.1
        
        # Facteur r√©gional
        regional_factor = region_pattern['multiplier']
        climate_factor = region_pattern['climate_factor']
        
        # Variation al√©atoire
        random_variation = random.uniform(1 - building_class['variation'], 
                                        1 + building_class['variation'])
        
        # Calcul final
        consumption = (base * time_factor * seasonal_factor * 
                      regional_factor * climate_factor * random_variation)
        
        # √âv√©nements sp√©ciaux (pannes, pics de consommation)
        consumption = self._apply_special_events(consumption)
        
        return max(0.1, consumption)  # Minimum 0.1 kWh
    
    def _apply_special_events(self, base_consumption: float) -> float:
        """
        Applique des √©v√©nements sp√©ciaux qui peuvent affecter la consommation
        
        Args:
            base_consumption (float): Consommation de base
            
        Returns:
            float: Consommation ajust√©e
        """
        # Pic de chaleur extr√™me (1% de chance)
        if random.random() < 0.01:
            return base_consumption * (1.5 + random.random())
        
        # Orages tropicaux avec coupures partielles (0.5% de chance)
        if random.random() < 0.005:
            if random.random() < 0.7:
                return base_consumption * 0.2  # Coupure partielle
            else:
                return base_consumption * 1.4  # Syst√®mes de secours
        
        return base_consumption


def convert_numpy_types(obj):
    """Convertit les types numpy en types Python natifs pour la s√©rialisation JSON"""
    if isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, dict):
        return {key: convert_numpy_types(value) for key, value in obj.items()}
    elif isinstance(obj, list):
        return [convert_numpy_types(item) for item in obj]
    else:
        return obj


def safe_json_response(data):
    """Cr√©e une r√©ponse JSON en convertissant les types numpy"""
    try:
        clean_data = convert_numpy_types(data)
        return jsonify(clean_data)
    except Exception as e:
        logger.error(f"Erreur s√©rialisation JSON: {e}")
        return jsonify({
            'success': False,
            'error': 'Erreur de s√©rialisation des donn√©es',
            'details': str(e)
        })


# ===== FONCTIONS OSM =====

def convert_osm_to_buildings_df(buildings_osm: List[dict], zone_data: dict) -> pd.DataFrame:
    """
    Convertit les b√¢timents OSM en DataFrame compatible avec le g√©n√©rateur
    
    Args:
        buildings_osm (List[dict]): Liste des b√¢timents OSM
        zone_data (dict): Informations de la zone
        
    Returns:
        pd.DataFrame: DataFrame des b√¢timents convertis
    """
    buildings_data = []
    
    for i, osm_building in enumerate(buildings_osm):
        # Mapping des tags OSM vers nos types de b√¢timents
        building_type = map_osm_to_building_type(osm_building.get('tags', {}))
        
        # Coordonn√©es (centre du b√¢timent)
        coords = osm_building.get('center', [0.0, 0.0])
        
        building = {
            'building_id': f"OSM_{zone_data.get('name', 'Zone')}_{i+1:04d}",
            'city': zone_data.get('name', 'Unknown'),
            'building_type': building_type,
            'latitude': coords[0] if len(coords) > 0 else 0.0,
            'longitude': coords[1] if len(coords) > 1 else 0.0,
            'region': zone_data.get('region', 'Unknown'),
            'state': zone_data.get('state', 'Unknown'),
            'base_consumption': generator.building_classes[building_type]['base_consumption'],
            'variation': generator.building_classes[building_type]['variation'],
            'osm_tags': osm_building.get('tags', {}),
            'osm_id': osm_building.get('id', f'unknown_{i}')
        }
        buildings_data.append(building)
    
    return pd.DataFrame(buildings_data)


def map_osm_to_building_type(osm_tags: dict) -> str:
    """
    Mappe les tags OSM vers nos types de b√¢timents
    
    Args:
        osm_tags (dict): Tags OSM du b√¢timent
        
    Returns:
        str: Type de b√¢timent correspondant
    """
    building_tag = osm_tags.get('building', '').lower()
    amenity_tag = osm_tags.get('amenity', '').lower()
    shop_tag = osm_tags.get('shop', '').lower()
    landuse_tag = osm_tags.get('landuse', '').lower()
    
    # Mapping d√©taill√©
    if building_tag in ['hospital'] or amenity_tag in ['hospital']:
        return 'Hospital'
    elif building_tag in ['clinic'] or amenity_tag in ['clinic', 'doctors']:
        return 'Clinic'
    elif building_tag in ['school', 'university'] or amenity_tag in ['school', 'university', 'college']:
        return 'School'
    elif building_tag in ['hotel'] or amenity_tag in ['hotel']:
        return 'Hotel'
    elif building_tag in ['restaurant'] or amenity_tag in ['restaurant', 'cafe', 'fast_food']:
        return 'Restaurant'
    elif building_tag in ['retail', 'commercial'] or shop_tag or amenity_tag in ['marketplace']:
        return 'Retail'
    elif building_tag in ['office'] or amenity_tag in ['office']:
        return 'Office'
    elif building_tag in ['warehouse', 'industrial'] or landuse_tag in ['industrial']:
        return 'Warehouse'
    elif building_tag in ['apartments', 'residential'] and 'apartment' in building_tag:
        return 'Apartment'
    elif building_tag in ['yes', 'house', 'residential'] or building_tag.startswith('residential'):
        return 'Residential'
    else:
        # Par d√©faut, consid√©rer comme r√©sidentiel
        return 'Residential'


def calculate_osm_stats(buildings_df: pd.DataFrame, timeseries_df: pd.DataFrame, zone_data: dict) -> dict:
    """
    Calcule les statistiques pour les donn√©es OSM
    
    Args:
        buildings_df (pd.DataFrame): DataFrame des b√¢timents
        timeseries_df (pd.DataFrame): DataFrame des s√©ries temporelles
        zone_data (dict): Informations de la zone
        
    Returns:
        dict: Statistiques calcul√©es
    """
    try:
        # Statistiques des b√¢timents
        building_counts = buildings_df['building_type'].value_counts().to_dict()
        total_buildings = len(buildings_df)
        
        # Statistiques de consommation
        if not timeseries_df.empty:
            total_consumption = timeseries_df['consumption_kwh'].sum()
            avg_consumption = timeseries_df['consumption_kwh'].mean()
            max_consumption = timeseries_df['consumption_kwh'].max()
            min_consumption = timeseries_df['consumption_kwh'].min()
            
            # Consommation par type de b√¢timent
            consumption_by_type = timeseries_df.groupby('building_type')['consumption_kwh'].sum().to_dict()
        else:
            total_consumption = avg_consumption = max_consumption = min_consumption = 0
            consumption_by_type = {}
        
        # Analyse g√©ographique
        lat_range = [buildings_df['latitude'].min(), buildings_df['latitude'].max()]
        lng_range = [buildings_df['longitude'].min(), buildings_df['longitude'].max()]
        
        return {
            'zone_info': {
                'name': zone_data.get('name', 'Unknown'),
                'region': zone_data.get('region', 'Unknown'),
                'total_buildings': total_buildings,
                'geographic_bounds': {
                    'latitude': lat_range,
                    'longitude': lng_range
                }
            },
            'building_distribution': building_counts,
            'consumption_stats': {
                'total_kwh': round(total_consumption, 2),
                'average_kwh': round(avg_consumption, 2),
                'max_kwh': round(max_consumption, 2),
                'min_kwh': round(min_consumption, 2),
                'by_building_type': {k: round(v, 2) for k, v in consumption_by_type.items()}
            },
            'data_quality': {
                'buildings_with_coords': len(buildings_df[(buildings_df['latitude'] != 0) & (buildings_df['longitude'] != 0)]),
                'buildings_without_coords': len(buildings_df[(buildings_df['latitude'] == 0) | (buildings_df['longitude'] == 0)]),
                'unique_building_types': len(building_counts),
                'generation_timestamp': datetime.now().isoformat()
            }
        }
    except Exception as e:
        logger.error(f"Erreur calcul statistiques OSM: {e}")
        return {
            'error': str(e),
            'zone_info': zone_data,
            'building_distribution': {},
            'consumption_stats': {},
            'data_quality': {}
        }


def analyze_osm_data_quality(buildings_osm: List[dict]) -> dict:
    """
    Analyse la qualit√© des donn√©es OSM re√ßues
    
    Args:
        buildings_osm (List[dict]): Liste des b√¢timents OSM
        
    Returns:
        dict: Analyse de qualit√©
    """
    if not buildings_osm:
        return {
            'total_buildings': 0,
            'buildings_with_tags': 0,
            'buildings_with_coords': 0,
            'tag_coverage': {},
            'quality_score': 0
        }
    
    buildings_with_tags = 0
    buildings_with_coords = 0
    tag_frequency = {}
    
    for building in buildings_osm:
        # V√©rification des tags
        tags = building.get('tags', {})
        if tags:
            buildings_with_tags += 1
            for tag_key in tags.keys():
                tag_frequency[tag_key] = tag_frequency.get(tag_key, 0) + 1
        
        # V√©rification des coordonn√©es
        coords = building.get('center', [])
        if len(coords) >= 2 and coords[0] != 0 and coords[1] != 0:
            buildings_with_coords += 1
    
    # Score de qualit√© (0-100)
    coord_score = (buildings_with_coords / len(buildings_osm)) * 50
    tag_score = (buildings_with_tags / len(buildings_osm)) * 50
    quality_score = coord_score + tag_score
    
    return {
        'total_buildings': len(buildings_osm),
        'buildings_with_tags': buildings_with_tags,
        'buildings_with_coords': buildings_with_coords,
        'tag_coverage': tag_frequency,
        'quality_score': round(quality_score, 1),
        'recommendations': generate_quality_recommendations(buildings_osm, quality_score)
    }


def generate_quality_recommendations(buildings_osm: List[dict], quality_score: float) -> List[str]:
    """
    G√©n√®re des recommandations bas√©es sur la qualit√© des donn√©es OSM
    
    Args:
        buildings_osm (List[dict]): Liste des b√¢timents OSM
        quality_score (float): Score de qualit√© calcul√©
        
    Returns:
        List[str]: Liste des recommandations
    """
    recommendations = []
    
    if quality_score >= 80:
        recommendations.append("‚úÖ Excellente qualit√© des donn√©es OSM")
    elif quality_score >= 60:
        recommendations.append("‚úÖ Bonne qualit√© des donn√©es OSM")
        recommendations.append("üí° V√©rifiez les b√¢timents sans coordonn√©es")
    elif quality_score >= 40:
        recommendations.append("‚ö†Ô∏è Qualit√© moyenne des donn√©es OSM")
        recommendations.append("üí° Ajoutez plus de tags descriptifs")
        recommendations.append("üí° V√©rifiez la pr√©cision des coordonn√©es")
    else:
        recommendations.append("‚ùå Qualit√© faible des donn√©es OSM")
        recommendations.append("üîß Enrichissez les donn√©es avec plus de tags")
        recommendations.append("üîß V√©rifiez et corrigez les coordonn√©es manquantes")
        recommendations.append("üîß Consid√©rez une validation manuelle")
    
    return recommendations


def prepare_sample_data(buildings_df: pd.DataFrame, timeseries_df: pd.DataFrame, sample_size: int = 10) -> dict:
    """
    Pr√©pare un √©chantillon de donn√©es pour l'aper√ßu
    
    Args:
        buildings_df (pd.DataFrame): DataFrame des b√¢timents
        timeseries_df (pd.DataFrame): DataFrame des s√©ries temporelles
        sample_size (int): Taille de l'√©chantillon
        
    Returns:
        dict: √âchantillon de donn√©es
    """
    try:
        # √âchantillon de b√¢timents
        sample_buildings = buildings_df.head(sample_size).to_dict('records')
        
        # √âchantillon de donn√©es temporelles (derniers points)
        if not timeseries_df.empty:
            sample_timeseries = timeseries_df.tail(sample_size * 5).to_dict('records')
        else:
            sample_timeseries = []
        
        return {
            'buildings_sample': sample_buildings,
            'timeseries_sample': sample_timeseries,
            'sample_info': {
                'buildings_shown': len(sample_buildings),
                'timeseries_shown': len(sample_timeseries),
                'total_buildings': len(buildings_df),
                'total_timeseries': len(timeseries_df)
            }
        }
    except Exception as e:
        logger.error(f"Erreur pr√©paration √©chantillon: {e}")
        return {
            'buildings_sample': [],
            'timeseries_sample': [],
            'sample_info': {'error': str(e)}
        }


# ===== INITIALISATION DU G√âN√âRATEUR =====
# CORRECTION CRITIQUE: Initialiser le g√©n√©rateur AVANT les routes
try:
    generator = ElectricityDataGenerator()
    logger.info("‚úÖ G√©n√©rateur principal initialis√© avec succ√®s")
except Exception as e:
    logger.error(f"‚ùå Erreur critique lors de l'initialisation du g√©n√©rateur: {e}")
    generator = None


# ===== ROUTES FLASK =====

@app.route('/')
def index():
    """Page d'accueil de l'application"""
    return render_template('index.html')


@app.route('/api/stats')
def api_stats():
    """API pour obtenir les statistiques du syst√®me"""
    try:
        if not generator:
            raise Exception("G√©n√©rateur non initialis√©")
        
        # Statistiques g√©n√©rales
        stats = {
            'total_cities': len(generator.malaysia_locations),
            'building_types': len(generator.building_classes),
            'distribution_method': 'Distribution intelligente' if BUILDING_DISTRIBUTOR_AVAILABLE else 'Distribution basique',
            'system_capabilities': {
                'building_distributor': BUILDING_DISTRIBUTOR_AVAILABLE,
                'enhanced_coordinates': ENHANCED_COORDINATES_AVAILABLE,
                'validation_system': False,
                'climate_patterns': True,
                'osm_integration': True
            },
            'available_cities': list(generator.malaysia_locations.keys()),
            'available_building_types': list(generator.building_classes.keys()),
            'regions': list(set(city['region'] for city in generator.malaysia_locations.values())),
            'system_status': 'Op√©rationnel'
        }
        
        return safe_json_response(stats)
        
    except Exception as e:
        logger.error(f"Erreur API stats: {e}")
        return jsonify({
            'error': str(e),
            'system_status': 'Erreur'
        }), 500


@app.route('/api/real-data-status')
def real_data_status():
    """API pour le statut des donn√©es r√©elles"""
    try:
        # Simulation du statut - √† remplacer par vraies donn√©es si disponibles
        status = {
            'real_data_available': False,
            'simulated_data_only': True,
            'data_sources': [
                'Distribution intelligente de b√¢timents',
                'Patterns de consommation r√©gionaux',
                'Facteurs climatiques Malaysia',
                '√âv√©nements sp√©ciaux simul√©s'
            ],
            'quality_indicators': {
                'distribution_accuracy': 85,
                'temporal_patterns': 90,
                'regional_variation': 80,
                'climate_integration': 95
            },
            'last_update': datetime.now().isoformat(),
            'recommendations': [
                'Donn√©es simul√©es bas√©es sur patterns r√©alistes',
                'Validation avec donn√©es r√©elles recommand√©e',
                'Calibrage possible avec mesures terrain'
            ]
        }
        
        return safe_json_response(status)
        
    except Exception as e:
        logger.error(f"Erreur API real-data-status: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/sample')
def sample_generation():
    """G√©n√®re un √©chantillon de d√©monstration"""
    try:
        if not generator:
            raise Exception("G√©n√©rateur non initialis√©")
        
        logger.info("üß™ G√©n√©ration d'un √©chantillon de d√©monstration")
        
        # Param√®tres de l'√©chantillon
        city_name = 'Kuala Lumpur'
        num_buildings = 10
        start_date = '2024-01-01'
        end_date = '2024-01-02'
        freq = '1H'
        
        # G√©n√©ration des b√¢timents
        buildings_df = generator.generate_buildings_dataframe(city_name, num_buildings)
        
        # G√©n√©ration des s√©ries temporelles
        timeseries_df = generator.generate_timeseries_data(buildings_df, start_date, end_date, freq)
        
        # Pr√©paration de la r√©ponse
        response_data = {
            'success': True,
            'sample_info': {
                'city': city_name,
                'num_buildings': len(buildings_df),
                'time_points': len(timeseries_df),
                'period': f"{start_date} √† {end_date}",
                'frequency': freq
            },
            'buildings': buildings_df.head().to_dict('records'),
            'timeseries': timeseries_df.head(20).to_dict('records'),
            'statistics': {
                'building_distribution': buildings_df['building_type'].value_counts().to_dict(),
                'total_consumption': round(timeseries_df['consumption_kwh'].sum(), 2),
                'average_consumption': round(timeseries_df['consumption_kwh'].mean(), 2)
            }
        }
        
        return safe_json_response(response_data)
        
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration √©chantillon: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


# ===== ROUTE OSM PRINCIPALE =====

@app.route('/generate-from-osm', methods=['POST'])
def generate_from_osm():
    """
    Route principale pour g√©n√©rer des donn√©es √† partir d'OpenStreetMap
    """
    try:
        logger.info("üó∫Ô∏è D√©but g√©n√©ration bas√©e sur OSM")
        
        if not generator:
            raise Exception("G√©n√©rateur non initialis√©")
        
        # R√©cup√©ration des donn√©es de la requ√™te
        data = request.get_json()
        if not data:
            raise ValueError("Donn√©es JSON requises")
        
        zone_data = data.get('zone_data', {})
        buildings_osm = data.get('buildings_osm', [])
        start_date = data.get('start_date', '2024-01-01')
        end_date = data.get('end_date', '2024-01-31')
        freq = data.get('freq', '30T')
        
        logger.info(f"Zone: {zone_data.get('name', 'Unknown')}")
        logger.info(f"B√¢timents OSM: {len(buildings_osm)}")
        logger.info(f"P√©riode: {start_date} √† {end_date}")
        logger.info(f"Fr√©quence: {freq}")
        
        # Validation des donn√©es
        if not buildings_osm:
            raise ValueError("Aucun b√¢timent OSM fourni")
        
        # Convertir les b√¢timents OSM en DataFrame compatible
        buildings_df = convert_osm_to_buildings_df(buildings_osm, zone_data)
        logger.info(f"‚úÖ {len(buildings_df)} b√¢timents convertis")
        
        # G√©n√©rer les s√©ries temporelles
        timeseries_df = generator.generate_timeseries_data(
            buildings_df, start_date, end_date, freq
        )
        logger.info(f"‚úÖ {len(timeseries_df)} enregistrements de consommation g√©n√©r√©s")
        
        # Statistiques et validation
        stats = calculate_osm_stats(buildings_df, timeseries_df, zone_data)
        
        # Analyse de la qualit√© OSM
        osm_quality = analyze_osm_data_quality(buildings_osm)
        
        # √âchantillon pour l'aper√ßu
        sample_data = prepare_sample_data(buildings_df, timeseries_df)
        
        # R√©ponse compl√®te
        response_data = {
            'success': True,
            'generation_id': str(uuid.uuid4()),
            'timestamp': datetime.now().isoformat(),
            'zone_info': stats['zone_info'],
            'data_summary': {
                'total_buildings': len(buildings_df),
                'total_consumption_records': len(timeseries_df),
                'time_range': f"{start_date} to {end_date}",
                'frequency': freq,
                'building_types': list(buildings_df['building_type'].unique())
            },
            'building_distribution': stats['building_distribution'],
            'consumption_statistics': stats['consumption_stats'],
            'osm_quality_analysis': osm_quality,
            'sample_data': sample_data,
            'export_options': {
                'csv_available': True,
                'json_available': True,
                'excel_available': True
            },
            'recommendations': osm_quality.get('recommendations', [])
        }
        
        # Stockage temporaire des donn√©es pour export (optionnel)
        # Ici vous pourriez sauvegarder les DataFrames pour un export ult√©rieur
        
        logger.info("‚úÖ G√©n√©ration OSM termin√©e avec succ√®s")
        return safe_json_response(response_data)
        
    except ValueError as ve:
        logger.error(f"Erreur de validation: {ve}")
        return jsonify({
            'success': False,
            'error': 'Donn√©es invalides',
            'details': str(ve)
        }), 400
        
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration OSM: {e}")
        return jsonify({
            'success': False,
            'error': 'Erreur interne du serveur',
            'details': str(e)
        }), 500


# ===== ROUTES ADDITIONNELLES =====

@app.route('/api/cities')
def api_cities():
    """API pour obtenir la liste des villes disponibles"""
    try:
        if not generator:
            raise Exception("G√©n√©rateur non initialis√©")
        
        cities_data = []
        for city_name, city_info in generator.malaysia_locations.items():
            cities_data.append({
                'name': city_name,
                'population': city_info['population'],
                'region': city_info['region'],
                'state': city_info['state'],
                'coordinates': city_info['coordinates']
            })
        
        # Tri par population d√©croissante
        cities_data.sort(key=lambda x: x['population'], reverse=True)
        
        return safe_json_response({
            'success': True,
            'cities': cities_data,
            'total_cities': len(cities_data)
        })
        
    except Exception as e:
        logger.error(f"Erreur API cities: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/building-types')
def api_building_types():
    """API pour obtenir les types de b√¢timents disponibles"""
    try:
        if not generator:
            raise Exception("G√©n√©rateur non initialis√©")
        
        building_types_data = []
        for type_name, type_info in generator.building_classes.items():
            building_types_data.append({
                'name': type_name,
                'description': type_info['description'],
                'base_consumption': type_info['base_consumption'],
                'variation': type_info['variation'],
                'peak_hours': type_info['peak_hours'],
                'seasonal_factor': type_info['seasonal_factor']
            })
        
        return safe_json_response({
            'success': True,
            'building_types': building_types_data,
            'total_types': len(building_types_data)
        })
        
    except Exception as e:
        logger.error(f"Erreur API building-types: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


# ===== INT√âGRATION DES MODULES ADDITIONNELS =====

# Int√©gration de l'API de pr√©diction si disponible
if COMPLETE_INTEGRATION_AVAILABLE:
    try:
        create_complete_integration(app, generator)
        logger.info("‚úÖ Int√©gration compl√®te activ√©e")
    except Exception as e:
        logger.error(f"Erreur int√©gration compl√®te: {e}")

# Gestion d'erreur globale
@app.errorhandler(404)
def not_found_error(error):
    """Gestionnaire pour les erreurs 404"""
    return jsonify({
        'success': False,
        'error': 'Route non trouv√©e',
        'available_routes': [
            '/ - Page d\'accueil',
            '/api/stats - Statistiques syst√®me',
            '/api/cities - Liste des villes',
            '/api/building-types - Types de b√¢timents',
            '/api/real-data-status - Statut des donn√©es',
            '/generate-from-osm - G√©n√©ration OSM (POST)',
            '/sample - √âchantillon de d√©monstration'
        ]
    }), 404


@app.errorhandler(500)
def internal_error(error):
    """Gestionnaire pour les erreurs 500"""
    return jsonify({
        'success': False,
        'error': 'Erreur interne du serveur',
        'details': 'Consultez les logs pour plus d\'informations'
    }), 500


# ===== POINT D'ENTR√âE PRINCIPAL =====

if __name__ == '__main__':
    print("=" * 60)
    print("üè¢ G√âN√âRATEUR DE DONN√âES √âLECTRIQUES MALAYSIA")
    print("=" * 60)
    print()
    
    # V√©rification de l'√©tat du syst√®me
    print("üîç √âTAT DU SYST√àME:")
    print(f"üèóÔ∏è Distributeur: {'Intelligent' if BUILDING_DISTRIBUTOR_AVAILABLE else 'Basique'}")
    print(f"üìç Coordonn√©es: {'Am√©lior√©es' if ENHANCED_COORDINATES_AVAILABLE else 'Classiques'}")
    print(f"üîó Int√©gration: {'Compl√®te' if COMPLETE_INTEGRATION_AVAILABLE else 'Basique'}")
    
    if generator:
        print(f"üåÜ Villes: {len(generator.malaysia_locations)}")
        print(f"üè¢ Types de b√¢timents: {len(generator.building_classes)}")
        print("‚úÖ G√©n√©rateur: Initialis√©")
    else:
        print("‚ùå ERREUR: G√©n√©rateur non initialis√©")
        print("üîß V√©rifiez les d√©pendances et relancez l'application")
    
    print()
    print("üåê URLS DISPONIBLES:")
    urls = [
        "http://localhost:5000 - Interface principale",
        "http://localhost:5000/api/stats - Statistiques syst√®me",
        "http://localhost:5000/api/cities - Liste des villes",
        "http://localhost:5000/api/building-types - Types de b√¢timents",
        "http://localhost:5000/api/real-data-status - Statut des donn√©es",
        "http://localhost:5000/generate-from-osm - G√©n√©ration OSM (POST)",
        "http://localhost:5000/sample - √âchantillon de d√©monstration"
    ]
    
    for url in urls:
        print(f"  {url}")
    
    print()
    print("üí° CONSEILS D'UTILISATION:")
    tips = [
        "üß™ Test: 5-20 b√¢timents, 1 semaine, fr√©quence 1H",
        "üìö D√©veloppement: 50-200 b√¢timents, 1-3 mois, 30T",
        "ü§ñ ML: 200-1000 b√¢timents, 6-12 mois, 1H",
        "üè≠ Production: 1000+ b√¢timents, 1+ an, 30T ou 1H"
    ]
    
    for tip in tips:
        print(f"  {tip}")
    
    print()
    print("üöÄ D√âMARRAGE DU SERVEUR...")
    print("=" * 60)
    
    try:
        if generator:
            app.run(debug=True, host='0.0.0.0', port=5000)
        else:
            print("‚ùå Impossible de d√©marrer: g√©n√©rateur non initialis√©")
            print("üîß Corrigez les erreurs ci-dessus et relancez")
    except Exception as e:
        print(f"‚ùå Erreur de d√©marrage: {e}")
        print("üîß V√©rifiez que le port 5000 n'est pas d√©j√† utilis√©")